#!/usr/bin/env node

/**
 * Module dependencies.
 */
const app = require("../app");
const debug = require("debug")("kuetianshub-backend:server");
const http = require("http");
const https = require("https");
const fs = require("fs");
const mongoose = require("mongoose");

/**
 * Get port from environment and store in Express.
 */
const port = normalizePort(process.env.PORT || "5000");
app.set("port", port);

/**
 * Create HTTP server.
 */
let server;
if (process.env.NODE_ENV === "production") {
  let privateKey, certificate;
  try {
    privateKey = fs.readFileSync(
      "/etc/letsencrypt/live/kuetianshub.com/privkey.pem"
    );
    certificate = fs.readFileSync(
      "/etc/letsencrypt/live/kuetianshub.com/fullchain.pem"
    );
  } catch (error) {}

  const credentials = {
    key: privateKey,
    cert: certificate,
  };
  server = https.createServer(credentials, app);
} else {
  server = http.createServer(app);
}

/**
 * Connect to database.
 */
mongoose
  .connect(process.env.MONGO_CONNECTION_STRING, {
    useNewUrlParser: true,
    useUnifiedTopology: true,
  })
  .then(() => console.log("Mongodb cluster connected"))
  .catch((err) => console.log(err));

/**
 * Listen on provided port, on all network interfaces.
 */
server.listen(process.env.PORT || port, "0.0.0.0", () => {
  console.log(
    `Server running in ${process.env.NODE_ENV} mode on port ${process.env.PORT}`
  );
});

server.on("error", onError);
server.on("listening", onListening);

/**
 * Normalize a port into a number, string, or false.
 */
function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */
function onError(error) {
  if (error.syscall !== "listen") {
    throw error;
  }

  var bind = typeof port === "string" ? "Pipe " + port : "Port " + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case "EACCES":
      console.error(bind + " requires elevated privileges");
      process.exit(1);
      break;
    case "EADDRINUSE":
      console.error(bind + " is already in use");
      process.exit(1);
      break;
    default:
      throw error;
  }
}
/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === "string" ? "pipe " + addr : "port " + addr.port;
  debug("Listening on " + bind);
}
